apiVersion: v1
kind: ConfigMap
metadata:
  name: ls-pipeline-10-input-http-cm
data:
  01_input_default.conf: |
    input {
      http {
        port => 50000
        response_code => 200

        user => "${SEND_DATA_USER}"
        password => "${SEND_DATA_PASSWORD}"

        # ssl_enabled => false

        ssl_enabled => true
        # ssl_certificate_authorities => ["/usr/share/logstash/certs/ca.crt"]
        ssl_certificate => "/usr/share/logstash/certs/tls.crt"
        ssl_key => "/usr/share/logstash/certs/tls.key"
        ssl_client_authentication => "none"
      }
    }
    
  02_filter_01_xml_determine_type.conf: |
    filter {


      mutate {
        lowercase  => [ "[@metadata][input][http][request][headers][tags]" ]
        split => { "[@metadata][input][http][request][headers][tags]" => "," }
        copy => { "[@metadata][input][http][request][headers][tags]" => "[source][tags]" }
        copy => { "[http]" => "[source][http]" }
        copy => { "[@metadata][input][http][request][headers][http_host]" => "[source][host]" }
        copy => { "[host][ip]" => "[source][ip]" }
      }


      if "nunit" in [@metadata][input][http][request][headers][tags] {

        # Try to determine the type
        ruby {
          code => '

            # # event.get("[@metadata]").each {|k,v| event.set("[meta][#{k}]", v)}
            
            # require "nokogiri"
            # require "json"

            # xml_raw = event.get("[message]")
            # doc = Nokogiri::XML(xml_raw)

            # def detect_nunit_version(doc)

            #   if doc.at_xpath("//test-results")
            #     return "NUnit 2"
            #   elsif doc.at_xpath("//test-run")
            #     engine_version = doc.at_xpath("//test-run/@engine-version")&.value
            #     framework_version = doc.at_xpath("//environment/@framework-version")&.value

            #     if engine_version&.start_with?("4.") || framework_version&.start_with?("4.")
            #       return "NUnit 4"
            #     else
            #       return "NUnit 3"
            #     end
            #   else
            #     return nil
            #   end
            # end

            # # Add detected version of nunit to tags
            # tags = event.get("[tags]")
            # tags << detect_nunit_version(doc)
            # event.set("[tags]", tags.uniq)
        '}

      }
      
      # Other xml type
    }

  02_filter_01_xml_nunit_v3_v4p.conf: |
    filter {

      if "nunit" in [@metadata][input][http][request][headers][tags] {
          # Nunit refactor and output

          ruby {
            code => '
              require "nokogiri"
              require "json"

              xml_raw = event.get("[message]")

            # # Load the XML file
              # xml_file = "TestResult.xml"
              # doc = Nokogiri::XML(File.read(xml_file))
              doc = Nokogiri::XML(xml_raw)

              # Extract Test Run Metadata
              test_run = doc.at_xpath("//test-run")

              test_run_data = {
                "id" => test_run["id"],
                "result" => test_run["result"],
                "label" => test_run["label"],
                "object-type" => "test-run",
                "total" => test_run["total"].to_i,
                "passed" => test_run["passed"].to_i,
                "failed" => test_run["failed"].to_i,
                "warnings" => test_run["warnings"].to_i,
                "inconclusive" => test_run["inconclusive"].to_i,
                "skipped" => test_run["skipped"].to_i,
                "asserts" => test_run["asserts"].to_i,
                "engine-version" => test_run["engine-version"],
                "clr-version" => test_run["clr-version"],
                "start-time" => test_run["start-time"].to_s.gsub(" ", "T"),
                "end-time" => test_run["end-time"].to_s.gsub(" ", "T"),
                "duration" => test_run["duration"].to_f,
                "command-line" => test_run.xpath("command-line/text()").to_s.strip.split("\n")
              }

              # Extract only Assembly-type test suites with full properties
              test_suites = doc.xpath("//test-suite[@type=\\'Assembly\\']").map do |suite|
                {
                  "id" => suite["id"],
                  "name" => suite["name"],
                  "result" => suite["result"],
                  "object-type" => "test-suite",
                  "start-time" => suite["start-time"].to_s.gsub(" ", "T"),
                  "end-time" => suite["end-time"].to_s.gsub(" ", "T"),
                  "duration" => suite["duration"].to_f,
                  "total" => suite["total"].to_i,
                  "passed" => suite["passed"].to_i,
                  "failed" => suite["failed"].to_i,
                  "inconclusive" => suite["inconclusive"].to_i,
                  "warnings" => suite["warnings"].to_i,
                  "asserts" => suite["asserts"].to_i,
                  "properties" => suite.xpath(".//environment | .//settings/setting | .//properties/property").map do |prop|
                    prop["name"] ? { "name" => prop["name"], "value" => prop["value"] } : nil
                  end.compact
                }
              end

              # Extract Test Cases while ensuring correct TestSuite ID assignment
              test_cases = doc.xpath("//test-case").map do |test|
                {
                  "id" => test["id"],
                  "name" => test["name"],
                  "classname" => test["classname"],
                  "object-type" => "test-case",
                  "result" => test["result"],
                  "start-time" => test["start-time"].to_s.gsub(" ", "T"),
                  "end-time" => test["end-time"].to_s.gsub(" ", "T"),
                  "duration" => test["duration"].to_f,
                  "asserts" => test["asserts"].to_i,
                  "test-suite-id" => test.ancestors("test-suite").find { |suite| suite["type"] == "Assembly" }&.[]("id"),
                  "test-run-id" => test_run["id"],
                  "assembly" => {
                    "id" => test.ancestors("test-suite[@type=\\'Assembly\\']").first&.[]("id"),
                    "name" => test.ancestors("test-suite[@type=\\'Assembly\\']").first&.[]("name"),
                    "result" => test.ancestors("test-suite[@type=\\'Assembly\\']").first&.[]("result"),
                    "total" => test.ancestors("test-suite[@type=\\'Assembly\\']").first&.[]("total").to_i,
                    "passed" => test.ancestors("test-suite[@type=\\'Assembly\\']").first&.[]("passed").to_i,
                    "failed" => test.ancestors("test-suite[@type=\\'Assembly\\']").first&.[]("failed").to_i,
                    "inconclusive" => test.ancestors("test-suite[@type=\\'Assembly\\']").first&.[]("inconclusive").to_i
                  },
                  "properties" => test.ancestors("test-suite[@type=\\'Assembly\\']").first.xpath(".//environment | .//settings/setting | .//properties/property").map do |prop|
                    prop["name"] ? { "name" => prop["name"], "value" => prop["value"] } : nil
                  end.compact,
                  "tags" => [
                    test.ancestors("test-suite").find { |suite| suite["type"] == "Assembly" }&.[]("name"),
                    test.ancestors("test-suite[@type=\\'TestFixture\\']").first&.[]("name"),
                    test["name"]
                  ],
                  "messages" => test.xpath(".//reason/message | .//assertion/message").map { |msg| msg.text.strip if msg.text }.compact,
                  "stack-traces" => test.xpath(".//assertion/stack-trace").map { |trace| trace.text.strip if trace.text }.compact
                }
              end

              event.set("[test-run]",[test_run_data])
              # event.set("[test-suites]",test_suites)
              event.set("[test-cases]",test_cases)

              event.remove("[message]")
              event.remove("[event][original]")
            '
          }

          mutate {
            update => { "[@metadata][index_prefix]" => "nunit" }
          }

      }

    }

  03_output_process_p2.conf: | 
    output {
      pipeline {
        send_to => ["20-process-split-test-case", "20-process-split-test-run"]
        # enable_metric => false
      }
    }